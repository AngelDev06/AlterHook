/* Part of the AlterHook project */
/* Designed & implemented by AngelDev06 */
#pragma once
#include <system_error>
#include <array>
#include "detail/macros.h"
#if utils_msvc
  #pragma warning(push)
  #pragma warning(disable : 4275 4251)
#endif

/**
 * @brief Consists of all the exception classes that the library may throw as a
 * response to errors that might occur.
 * @note Due to an insane amount of boilerplate required to properly define an
 * exception class, the library uses some handy macros to generate everything
 * automatically. So reading the header file will require knowing how these
 * macros work.
 */
namespace alterhook::exceptions
{
  template <size_t n>
  using byte_array = std::array<std::byte, n>;

  /**
   * @class alterhook::exceptions::alterhook_exception
   * @brief Base class for all exceptions generated by the library.
   * @fn std::string alterhook::exceptions::alterhook_exception::info() const
   * @brief A pure virtual function which at run-time tries to collect as much
   * information as possible about what happened and generate a string from it.
   * @details This is intended to be used for debugging purposes. Base classes
   * of @ref alterhook::exceptions::alterhook_exception are meant to override
   * this method and fill the generated string with their fields which hold the
   * information needed. This may or may not be a heavy function so use it
   * wisely.
   */
  utils_generate_exception(alterhook_exception, std::exception,
                           stdattr(ALTERHOOK_API),
                           extra(virtual std::string info() const = 0;));

  /**
   * @class alterhook::exceptions::trampoline_exception
   * @brief Base class for all the exceptions caused during the trampoline
   * generation.
   * @note Not every exception thrown during the construction of
   * @ref alterhook::trampoline is derived from this class. Only those that are
   * directly related to an error caused while relocating instructions from the
   * target function.
   */
  utils_generate_exception(trampoline_exception, alterhook_exception,
                           stdattr(ALTERHOOK_API),
                           fields((const std::byte*, target)),
                           extra(virtual std::string info() const;));

  // clang-format off
  /**
   * @class alterhook::exceptions::disassembler_exception
   * @brief Base class for all the exceptions caused by the capstone
   * disassembler.
   * @details When something from the capstone api fails an error code is
   * obtained from `cs_errno`. It will then be wrapped in an exception class
   * derived from this one and thrown.
   * @fn const char* alterhook::exceptions::disassembler_exception::get_error_string() const
   * @brief Obtains the stringified version of the capstone error code via a
   * call to `cs_strerror`.
   */
  utils_generate_exception(
      disassembler_exception, alterhook_exception, stdattr(ALTERHOOK_API),
      fields((const std::byte*, target), (int, flag, hidden)),
      reason("An exception occurred with the disassembler"),
      extra(const char* get_error_string() const noexcept;
            std::string info() const override { return get_error_string(); }));
  // clang-format on

  /**
   * @class alterhook::exceptions::os_exception
   * @brief Base class for all the exceptions caused by the system api.
   * @details The library makes use of many system api functions as they are
   * needed to perform low level tasks. Most of them return an error code at
   * failure while others expect the user to obtain it from something like
   * `errno` (on linux) or `GetLastError()` (on windows). It is then wrapped in
   * an exception class derived from this one and can be obtained as an instance
   * of `std::error_code` for portability.
   * @fn std::string alterhook::exceptions::os_exception::error_function() const
   * @brief Returns string representation of the function call that caused the
   * exception.
   * @details The format is basically `<funcname>(<args...>)` where `<args...>`
   * are replaced by their respective values that were passed to the function.
   * (e.g. `mmap(0xFFFFFF, 4000, 7, 1048610, 0, 0)`)
   * @note Since some functions expect pointers as input parameters, these
   * pointers are currently included in the stringified version as is. Therefore
   * if the pointers point to a stack allocated instance, they will no longer
   * point to valid memory after the exception is thrown. This is intended for
   * debugging purposes and it is possible that the output will change in the
   * future.
   */
  utils_generate_exception(
      os_exception, alterhook_exception, stdattr(ALTERHOOK_API),
      fields((std::error_code, error_code)),
      extra(os_exception(int code)
            : m_error_code(code, std::system_category()) {} virtual std::string
                        error_function() const = 0;
            std::string info() const override;));

  /**
   * @class alterhook::exceptions::misc_exception
   * @brief Base class for all the exceptions that did not fit to any of the
   * other categories.
   */
  utils_generate_exception(misc_exception, alterhook_exception,
                           stdattr(ALTERHOOK_API));

  inline namespace trampoline
  {
#if utils_arm
  #define __uih_thumb_field , (bool, thumb, hidden)
#else
  #define __uih_thumb_field
#endif

    // clang-format off
    /**
     * @class alterhook::exceptions::trampoline::unsupported_instruction_handling
     * @brief Thrown when an instruction is spotted that the library does not
     * yet know how to handle.
     */
    utils_generate_exception(
        unsupported_instruction_handling, trampoline_exception,
        stdattr(ALTERHOOK_API),
        fields((byte_array<24>, instr, hidden)__uih_thumb_field),
        base_args((const std::byte*, target)),
        reason("Cannot handle a given instruction in the target function"),
        extra(std::string info() const override;));
    // clang-format on

#if utils_arm || defined(RUNNING_DOXYGEN)
    // clang-format off
    /**
     * @class alterhook::exceptions::trampoline::it_block_exception
     * @brief Base class for all exceptions that are related to thumb IT blocks.
     * @details reference:
     * https://developer.arm.com/documentation/dui0473/m/arm-and-thumb-instructions/it
     * @note Part of the armv7 implementation only
     * @fn std::string alterhook::exceptions::trampoline::it_block_exception::it_str() const
     * @brief Returns a stringified version of the IT instruction involved.
     * @fn size_t alterhook::exceptions::trampoline::it_block_exception::instruction_count() const
     * @brief Returns the number of instructions that were part of the IT block
     * before this exception was thrown.
     */
    utils_generate_exception(
        it_block_exception, trampoline_exception, stdattr(ALTERHOOK_API),
        fields((byte_array<32>, buffer, hidden), (size_t, buffer_size, hidden),
               (const std::byte*, it_address),
               (size_t, remaining_instructions)),
        base_args((const std::byte*, target)),
        extra(std::string info() const override; std::string it_str() const;
              size_t instruction_count() const;));

    // clang-format on

    inline namespace it_block
    {
      /**
       * @class alterhook::exceptions::trampoline::it_block::invalid_it_block
       * @brief Thrown when an IT block was spotted in the target function that
       * does not meet the requirements of a valid one.
       * @note Part of the armv7 implementation only
       */
      utils_generate_exception(
          invalid_it_block, it_block_exception, stdattr(ALTERHOOK_API),
          base_args((const std::byte*, target), (byte_array<32>, buffer),
                    (size_t, buffer_size), (const std::byte*, it_address),
                    (size_t, remaining_instructions)),
          reason("An invalid IT block was encountered"));

      /**
       * @class alterhook::exceptions::trampoline::it_block::incomplete_it_block
       * @brief Thrown when a part of the IT block failed to be relocated as the
       * trampoline was finishing.
       * @note Part of the armv7 implementation only
       */
      utils_generate_exception(
          incomplete_it_block, it_block_exception, stdattr(ALTERHOOK_API),
          base_args((const std::byte*, target), (byte_array<32>, buffer),
                    (size_t, buffer_size), (const std::byte*, it_address),
                    (size_t, remaining_instructions)),
          reason("A part of an IT block was cut off when completing the "
                 "trampoline function"));
    } // namespace it_block

    /**
     * @class alterhook::exceptions::trampoline::pc_relative_handling_fail
     * @brief On failure to fix PC-relative instructions as they are relocated
     * to the trampoline, this exception is thrown.
     * @note Part of the armv7 implementation only
     */
    utils_generate_exception(
        pc_relative_handling_fail, trampoline_exception, stdattr(ALTERHOOK_API),
        fields((const std::byte*, instruction_address),
               (byte_array<24>, buffer, hidden), (bool, thumb, hidden)),
        base_args((const std::byte*, target)),
        reason("A PC relative instruction cannot be fixed"),
        extra(std::string info() const override;));

    /**
     * @class alterhook::exceptions::trampoline::ambiguous_instruction_set
     * @brief An exception thrown when two or more branches lead to the same
     * destination but with different target instruction set.
     * @note Part of the armv7 implementation only
     */
    utils_generate_exception(
        ambiguous_instruction_set, trampoline_exception, stdattr(ALTERHOOK_API),
        fields((byte_array<32>, buffer, hidden), (size_t, size, hidden),
               (std::bitset<32>, instruction_sets, hidden),
               (const std::byte*, branch_destination)),
        base_args((const std::byte*, target)),
        reason("More than one branch instruction lead to the same destination "
               "but with different instruction sets"),
        extra(std::string info() const override;));
#endif

#if utils_arm || utils_aarch64 || defined(RUNNING_DOXYGEN)
    /**
     * @class alterhook::exceptions::trampoline::unused_register_not_found
     * @brief When a temporary register meant to hold the original value of the
     * PC register was not found, this exception is thrown.
     * @note Part of the armv7/aarch64 implementation only
     */
    utils_generate_exception(
        unused_register_not_found, trampoline_exception, stdattr(ALTERHOOK_API),
        base_args((const std::byte*, target)),
        reason("Couldn't find a register suitable for handling "
               "PC relative instructions"));
#endif

    /**
     * @class alterhook::exceptions::trampoline::bad_target
     * @brief Thrown when the target couldn't be disassembled.
     */
    utils_generate_exception(bad_target, trampoline_exception,
                             stdattr(ALTERHOOK_API),
                             base_args((const std::byte*, target)),
                             reason("The target failed to be disassembled"));

    // clang-format off
    /**
     * @class alterhook::exceptions::trampoline::instructions_in_branch_handling_fail
     * @brief Thrown when a branch instruction needed to be modified but doing
     * so would break the rest of the instructions.
     */
    utils_generate_exception(
        instructions_in_branch_handling_fail, trampoline_exception,
        stdattr(ALTERHOOK_API), base_args((const std::byte*, target)),
        reason("An instruction in the middle of a branch cannot be altered "
               "without breaking the branch"));
    // clang-format on

    /**
     * @class alterhook::exceptions::trampoline::trampoline_max_size_exceeded
     * @brief When the size of the instructions relocated/generated exceed the
     * fixed size trampoline buffer, this exception is thrown.
     */
    utils_generate_exception(trampoline_max_size_exceeded, trampoline_exception,
                             stdattr(ALTERHOOK_API),
                             fields((size_t, size), (size_t, max_size)),
                             base_args((const std::byte*, target)),
                             reason("Exceeded the trampoline's available size"),
                             extra(std::string info() const override;));

    utils_generate_exception(
        insufficient_function_size, trampoline_exception,
        stdattr(ALTERHOOK_API), fields((size_t, size), (size_t, needed_size)),
        base_args((const std::byte*, target)),
        reason("The original function isn't long enough to hook"),
        extra(std::string info() const override;));
  } // namespace trampoline

  inline namespace disassembler
  {
    utils_generate_exception(disassembler_init_fail, disassembler_exception,
                             stdattr(ALTERHOOK_API),
                             base_args((const std::byte*, target), (int, flag)),
                             reason("Disassembler failed to be initialized"));

    utils_generate_exception(
        disassembler_iter_init_fail, disassembler_exception,
        base_args((const std::byte*, target), (int, flag)),
        reason("Disassembler iterator failed to be initialized"));

    utils_generate_exception(
        disassembler_disasm_fail, disassembler_exception,
        base_args((const std::byte*, target), (int, flag)),
        reason(
            "Disassembler failed when trying to disassemble an instruction"));
  } // namespace disassembler

  inline namespace os
  {
#if utils_windows || defined(RUNNING_DOXYGEN)
    /**
     * @class alterhook::exceptions::os::virtual_alloc_exception
     * @note Part of the windows implementation only
     */
    utils_generate_exception(
        virtual_alloc_exception, os_exception, stdattr(ALTERHOOK_API),
        fields((const std::byte*, target_address), (size_t, size),
               (uint64_t, allocation_type), (uint64_t, protection)),
        base_args((int, flag)),
        reason("An exception occurred when trying to allocate a memory block"),
        extra(std::string error_function() const override;));

    /**
     * @class alterhook::exceptions::os::thread_list_traversal_fail
     * @note Part of the windows implementation only
     */
    utils_generate_exception(
        thread_list_traversal_fail, os_exception, stdattr(ALTERHOOK_API),
        fields((const void*, handle), (uintptr_t, thread_entry_address)),
        base_args((int, flag)),
        reason(
            "Failed to traverse over the thread list of the current process"),
        extra(std::string error_function() const override;));

    /**
     * @class alterhook::exceptions::os::virtual_protect_exception
     * @note Part of the windows implementation only
     */
    utils_generate_exception(
        virtual_protect_exception, os_exception, stdattr(ALTERHOOK_API),
        fields((const std::byte*, address), (size_t, size),
               (size_t, protection), (uintptr_t, old_protection)),
        base_args((int, flag)),
        reason("An exception occurred when trying to the "
               "change the protection of the target function"),
        extra(std::string error_function() const override;));
#endif

#if !utils_windows || defined(RUNNING_DOXYGEN)
    /**
     * @class alterhook::exceptions::os::mmap_exception
     * @note Part of the linux implementation only
     */
    utils_generate_exception(
        mmap_exception, os_exception, stdattr(ALTERHOOK_API),
        fields((const std::byte*, target_address), (size_t, size),
               (int, protection), (int, flags), (int, fd), (uint64_t, offset)),
        base_args((int, flag)),
        reason("An exception occurred when trying to allocate a memory block"),
        extra(std::string error_function() const override;));

    /**
     * @class alterhook::exceptions::os::sigaction_exception
     * @note Part of the linux implementation only
     */
    utils_generate_exception(
        sigaction_exception, os_exception, stdattr(ALTERHOOK_API),
        fields((int, signal), (const void*, action), (const void*, old_action)),
        base_args((int, flag)),
        reason("An exception occurred when trying to setup the signal handler"),
        extra(std::string error_function() const override;));

    /**
     * @class alterhook::exceptions::os::mprotect_exception
     * @note Part of the linux implementation only
     */
    utils_generate_exception(mprotect_exception, os_exception,
                             stdattr(ALTERHOOK_API),
                             fields((const std::byte*, address),
                                    (size_t, length), (int, protection)),
                             base_args((int, flag)),
                             reason("An exception occurred when changing the "
                                    "protection of a memory page"),
                             extra(std::string error_function()
                                       const override;));
#endif
  } // namespace os

  inline namespace misc
  {
#if !utils_windows
    utils_generate_exception(
        thread_process_fail, misc_exception, stdattr(ALTERHOOK_API),
        fields((const std::byte*, trampoline_address),
               (const std::byte*, target_address), (size_t, position)),
        reason(
            "A thread failed to be processed in order for the hooks to work"),
        extra(std::string info() const override;));
#endif

    utils_generate_exception(invalid_address, misc_exception,
                             stdattr(ALTERHOOK_API),
                             fields((const std::byte*, address)),
                             reason("A non-executable address was passed"),
                             extra(std::string info() const override;));
  } // namespace misc
} // namespace alterhook::exceptions

// Exception Groups
// clang-format off
/**
 * @defgroup trampoline-init-exceptions Trampoline Initialization Exceptions
 * @throws alterhook::exceptions::trampoline_exception
 * @throws alterhook::exceptions::disassembler_exception
 * @throws alterhook::exceptions::os_exception
 * @throws alterhook::exceptions::misc_exception
 * @throws alterhook::exceptions::trampoline::unsupported_instruction_handling
 * @throws alterhook::exceptions::trampoline::it_block_exception armv7 specific
 * @throws alterhook::exceptions::trampoline::it_block::invalid_it_block armv7
 * specific
 * @throws alterhook::exceptions::trampoline::it_block::incomplete_it_block
 * armv7 specific
 * @throws alterhook::exceptions::trampoline::pc_relative_handling_fail armv7
 * specific
 * @throws alterhook::exceptions::trampoline::ambiguous_instruction_set armv7
 * specific
 * @throws alterhook::exceptions::trampoline::unused_register_not_found
 * armv7/aarch64 specific
 * @throws alterhook::exceptions::trampoline::bad_target
 * @throws alterhook::exceptions::trampoline::instructions_in_branch_handling_fail
 * @throws alterhook::exceptions::trampoline::trampoline_max_size_exceeded
 * @throws alterhook::exceptions::trampoline::insufficient_function_size
 * @throws alterhook::exceptions::disassembler::disassembler_init_fail
 * @throws alterhook::exceptions::disassembler::disassembler_iter_init_fail
 * @throws alterhook::exceptions::disassembler::disassembler_disasm_fail
 * @throws alterhook::exceptions::os::virtual_alloc_exception windows specific
 * @throws alterhook::exceptions::os::mmap_exception linux specific
 * @throws alterhook::exceptions::misc::invalid_address
 */
// clang-format on

/**
 * @defgroup trampoline-copy-exceptions Trampoline Copy Exceptions
 * @throws alterhook::exceptions::os_exception
 * @throws alterhook::exceptions::os::virtual_alloc_exception windows specific
 * @throws alterhook::exceptions::os::mmap_exception linux specific
 * @throws alterhook::exceptions::disassembler_exception x86 specific
 * @throws alterhook::exceptions::disassembler::disassembler_init_fail x86
 * specific
 * @throws alterhook::exceptions::disassembler::disassembler_iter_init_fail x86
 * specific
 * @throws alterhook::exceptions::disassembler::disassembler_disasm_fail x86
 * specific
 */

/**
 * @defgroup thread-freezer-exceptions Thread Freezer Exceptions
 * @throws alterhook::exceptions::os_exception
 * @throws alterhook::exceptions::misc_exception
 * @throws alterhook::exceptions::os::thread_list_traversal_fail windows
 * specific
 * @throws alterhook::exceptions::os::sigaction_exception linux specific
 * @throws alterhook::exceptions::misc::thread_process_fail
 */

/**
 * @defgroup target-injection-exceptions Target Injection Exceptions
 * @throws alterhook::exceptions::os_exception
 * @throws alterhook::exceptions::os::virtual_protect_exception windows specific
 * @throws alterhook::exceptions::os::mprotect_exception linux specific
 */

#if utils_msvc
  #pragma warning(pop)
#endif
